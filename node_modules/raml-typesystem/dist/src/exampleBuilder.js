"use strict";
var rt = require("./typesystem");
var meta = require("./metainfo");
var restrictions_1 = require("./restrictions");
var restrictions_2 = require("./restrictions");
var exCalcFlag = "exampleCalculation";
function example(t) {
    var ms = t.oneMeta(meta.Example);
    if (ms) {
        return ms.example();
    }
    if (t.getExtra(exCalcFlag)) {
        return null;
    }
    t.putExtra(exCalcFlag, true);
    try {
        var ms1 = t.oneMeta(meta.Examples);
        if (ms1) {
            var examples = ms1.examples();
            if (examples && examples.length > 0) {
                return examples[0];
            }
        }
        var d = t.oneMeta(meta.Default);
        if (d) {
            return d.value();
        }
        if (t.isObject()) {
            var result = {};
            t.meta().forEach(function (x) {
                if (x instanceof restrictions_2.PropertyIs) {
                    var p = x;
                    var ex = example(p.value());
                    result[p.propertyName()] = ex;
                }
            });
            t.superTypes().forEach(function (x) {
                if (x.oneMeta(meta.Example) || x.oneMeta(meta.Examples)) {
                    var ex = example(x);
                    if (ex && typeof ex === "object") {
                        Object.keys(ex).forEach(function (key) {
                            result[key] = ex[key];
                        });
                    }
                }
            });
            return result;
        }
        if (t.isArray()) {
            var c = t.oneMeta(restrictions_1.ComponentShouldBeOfType);
            var resultArray = [];
            if (c) {
                resultArray.push(example(c.value()));
            }
            return resultArray;
        }
        if (t.isUnion()) {
            return example(t.typeFamily()[0]);
        }
        if (t.isNumber()) {
            return 1;
        }
        if (t.isBoolean()) {
            return true;
        }
        return "some value";
    }
    finally {
        t.putExtra(exCalcFlag, false);
    }
}
exports.example = example;
var Example = (function () {
    function Example(_value, _name, _displayName, _description, _strict, _annotations, _isSingle, _empty) {
        if (_name === void 0) { _name = undefined; }
        if (_displayName === void 0) { _displayName = undefined; }
        if (_description === void 0) { _description = undefined; }
        if (_strict === void 0) { _strict = true; }
        if (_annotations === void 0) { _annotations = {}; }
        if (_isSingle === void 0) { _isSingle = false; }
        if (_empty === void 0) { _empty = false; }
        this._value = _value;
        this._name = _name;
        this._displayName = _displayName;
        this._description = _description;
        this._strict = _strict;
        this._annotations = _annotations;
        this._isSingle = _isSingle;
        this._empty = _empty;
        this._scalarsAnnotations = {};
    }
    Example.prototype.isEmpty = function () {
        return this._empty;
    };
    Example.prototype.isJSONString = function () {
        return typeof this._value === "string" && ((this._value + "").trim().indexOf("{") == 0 || (this._value + "").trim().indexOf("[") == 0);
    };
    Example.prototype.isXMLString = function () {
        return typeof this._value === "string" && (this._value + "").trim().indexOf("<") == 0;
    };
    Example.prototype.asXMLString = function () {
        if (this.isXMLString()) {
            return this._value;
        }
        if (this._owner) {
            return this._owner.asXMLString();
        }
        return null;
    };
    Example.prototype.isYAML = function () {
        if (typeof this._value === "string") {
            return !(this.isJSONString() || this.isXMLString());
        }
        return true;
    };
    Example.prototype.asString = function () {
        if (typeof this._value === "string") {
            return "" + this._value;
        }
        return this.expandAsString();
    };
    Example.prototype.asJSON = function () {
        if (this.isJSONString()) {
            try {
                return JSON.parse(this._value);
            }
            catch (e) {
                return null;
            }
        }
        if (this.isYAML()) {
            return this._value;
        }
        return this.expandAsString();
    };
    Example.prototype.original = function () {
        return this._value;
    };
    Example.prototype.expandAsString = function () {
        return JSON.stringify(this.expandAsJSON(), null, 2);
    };
    Example.prototype.expandAsJSON = function () {
        return this._value;
    };
    Example.prototype.isSingle = function () {
        return this._isSingle;
    };
    Example.prototype.strict = function () {
        return this._strict;
    };
    Example.prototype.description = function () {
        return this._description;
    };
    Example.prototype.displayName = function () {
        return this._displayName;
    };
    Example.prototype.annotations = function () {
        return this._annotations;
    };
    Example.prototype.name = function () {
        return this._name;
    };
    Example.prototype.scalarsAnnotations = function () {
        return this._scalarsAnnotations;
    };
    Example.prototype.registerScalarAnnotatoion = function (a, pName) {
        var aMap = this._scalarsAnnotations[pName];
        if (!aMap) {
            aMap = {};
            this._scalarsAnnotations[pName] = aMap;
        }
        aMap[a.facetName()] = a;
    };
    return Example;
}());
var toExample = function (owner, exampleObj, name, isSingle) {
    if (name === void 0) { name = null; }
    if (isSingle === void 0) { isSingle = false; }
    var example;
    if (exampleObj != null) {
        var val = exampleObj.value;
        if (!val) {
            val = exampleObj;
            example = new Example(val, name, undefined, undefined, true, undefined, isSingle);
        }
        else {
            var displayName = scalarValue(exampleObj, "displayName");
            var description = scalarValue(exampleObj, "description");
            var strict = scalarValue(exampleObj, "strict");
            var aObj = {};
            scalarAnnotaitons(exampleObj).forEach(function (x) {
                aObj[x.facetName()] = x;
            });
            example = new Example(val, name, displayName, description, strict, aObj, isSingle);
            for (var _i = 0, _a = scalarAnnotaitons(exampleObj["displayName"]); _i < _a.length; _i++) {
                var a = _a[_i];
                example.registerScalarAnnotatoion(a, "displayName");
            }
            for (var _b = 0, _c = scalarAnnotaitons(exampleObj["description"]); _b < _c.length; _b++) {
                var a = _c[_b];
                example.registerScalarAnnotatoion(a, "description");
            }
            for (var _d = 0, _e = scalarAnnotaitons(exampleObj["strict"]); _d < _e.length; _d++) {
                var a = _e[_d];
                example.registerScalarAnnotatoion(a, "strict");
            }
        }
    }
    if (example) {
        example._owner = owner;
    }
    return example;
};
function scalarValue(obj, propName) {
    var pVal = obj[propName];
    if (pVal != null && typeof (pVal) == "object") {
        return pVal["value"];
    }
    return pVal;
}
function scalarAnnotaitons(obj) {
    var result = [];
    if (!obj || typeof (obj) != "object") {
        return result;
    }
    for (var _i = 0, _a = Object.keys(obj).filter(function (x) { return x.length > 0 && x.charAt(0) == "(" && x.charAt(x.length - 1) == ")"; }); _i < _a.length; _i++) {
        var aKey = _a[_i];
        var aName = aKey.substring(1, aKey.length - 1);
        var aVal = obj[aKey];
        var a = new meta.Annotation(aName, aVal);
        result.push(a);
    }
    return result;
}
function exampleFromInheritedType(inheritedType) {
    var result = [];
    var ms1 = inheritedType.oneMeta(meta.Examples);
    if (ms1) {
        var vl = ms1.value();
        if (vl && typeof vl === "object") {
            var xmlValues;
            Object.keys(vl).forEach(function (key) {
                var name = Array.isArray(vl) ? null : key;
                var exampleObj = vl[key];
                var example = toExample({ asXMLString: function () {
                        if (!xmlValues) {
                            xmlValues = ms1.asXMLStrings();
                        }
                        return xmlValues[key];
                    } }, exampleObj, name);
                result.push(example);
            });
        }
    }
    var ms = inheritedType.oneMeta(meta.Example);
    if (ms) {
        var exampleV = ms.example();
        if (exampleV != null) {
            result.push(toExample(ms, ms.value(), undefined, true));
        }
    }
    return result;
}
function exampleFromNominal(nominalType, collectFromSupertype) {
    var originalInherited = nominalType.getAdapter(rt.InheritedType);
    if (originalInherited) {
        var originalTypeExamples = exampleFromInheritedType(originalInherited);
        if (originalTypeExamples && originalTypeExamples.length > 0) {
            return originalTypeExamples;
        }
        if (collectFromSupertype && nominalType.isUserDefined() && !nominalType.isGenuineUserDefinedType()
            && nominalType.genuineUserDefinedTypeInHierarchy()) {
            var genuineNominal = nominalType.genuineUserDefinedTypeInHierarchy();
            var genuineInherited = genuineNominal.getAdapter(rt.InheritedType);
            if (genuineInherited) {
                var genuineTypeExamples = exampleFromInheritedType(genuineInherited);
                if (genuineTypeExamples && genuineTypeExamples.length > 0) {
                    return genuineTypeExamples;
                }
            }
        }
    }
    if (originalInherited) {
        return [new Example(example(originalInherited), undefined, undefined, undefined, false, undefined, undefined, true)];
    }
    return [];
}
exports.exampleFromNominal = exampleFromNominal;
//# sourceMappingURL=exampleBuilder.js.map